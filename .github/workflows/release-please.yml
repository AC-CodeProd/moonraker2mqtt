name: release-please
on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if ["$(gofmt -l . | wc -l)" -gt 0]; then
            echo "Code is not properly formatted:"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check test coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current test coverage: ${coverage}%"
          echo "coverage=${coverage}" >> $GITHUB_OUTPUT

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          cache-dependency-path: go.sum

      - name: Get version
        id: version
        run: |
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            version=$(git describe --tags --exact-match HEAD | sed 's/^v//')
          elif [ -f VERSION ]; then
            version=$(awk '{print $1}' VERSION)
          elif [ -f .release-please-manifest.json ]; then
            version=$(jq -r '."."' .release-please-manifest.json)
          else
            version="dev"
          fi
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Version: ${version}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Create builds directory
          mkdir -p builds
          
          # Set binary name with platform suffix
          BINARY_NAME="moonraker2mqtt-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          PKG_VER=$(go list -m -f '{{.Path}}')/version
          
          # Build with version info
          go build \
            -ldflags="-w -s -X '${PKG_VER}.Version=${{ steps.version.outputs.version }}' -X '${PKG_VER}.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X '${PKG_VER}.GitCommit=${GITHUB_SHA::8}' -X '${PKG_VER}.GitURL=https://github.com/${{ github.repository }}'" \
            -o "builds/${BINARY_NAME}" \
            ./cmd/main.go
          
          # Verify the binary
          ls -la builds/
          if [ "${{ matrix.goos }}" != "windows" ]; then
            file "builds/${BINARY_NAME}"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moonraker2mqtt-${{ matrix.goos }}-${{ matrix.goarch }}
          path: builds/*

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

  upload-release-assets:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy all binaries to release-assets directory
          find artifacts -name "moonraker2mqtt-*" -type f -exec cp {} release-assets/ \;
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          
          # List all files
          echo "Release assets:"
          ls -la

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Upload each file to the release
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading: $(basename "$file")"
              gh release upload ${{ needs.release.outputs.tag_name }} "$file"
            fi
          done
